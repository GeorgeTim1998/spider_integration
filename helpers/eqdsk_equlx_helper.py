import numpy as np
import matplotlib.pyplot as pyplot
import math as mt
from math import pi

def write_np_array_to_file(file, array, number_format):
  columns = 5
  rows = mt.floor(len(array)/5)
  sep_index = columns*rows

  arr5 = array[0: sep_index]
  arrleftover = array[sep_index: :]

  arr5 = np.resize(arr5, (rows, columns))
  arrleftover = np.resize(arrleftover, (1, len(arrleftover)))
  np.savetxt(file, arr5, fmt=number_format, delimiter='')
  np.savetxt(file, arrleftover, fmt=number_format, delimiter='')
  
def restore_pres_n_fpol(um, up, meshr, pprime, ffprim, bcentr, rcentr):
  um = -um / (2*pi)
  up = -up / (2*pi)
  dpsi = (um - up)/(meshr-1)

  pres = np.zeros(len(pprime))
  fpol = np.zeros(len(pprime))
  fpol[-1] = bcentr * rcentr

  my_steps = np.flip(np.array(range(0, meshr-1)))
  for i in my_steps:
    pprim_c = -0.5 * (pprime[i+1] + pprime[i])
    fprim_c = -0.5 * (ffprim[i+1] + ffprim[i])
    
    pres[i]=(pres[i+1] + pprim_c * 2*pi*dpsi) # for some reason pres needs 2pi multiplicator to be actual pressure
    fpol[i]=mt.sqrt(fpol[i+1]**2 + 2*fprim_c * 2*pi*dpsi)

  return pres, fpol  

def plot_pres_fpol_n_ders(pres, fpol, pprime, ffprim, show=False):
  psi = np.linspace(0, 1, len(fpol))

  pyplot.subplot(221)
  pyplot.scatter(psi, pres)
  pyplot.ylabel('pres')
  pyplot.xlabel('psi')
  pyplot.grid(True)

  pyplot.subplot(223)
  pyplot.scatter(psi, -pprime)
  pyplot.ylabel('pprim')
  pyplot.xlabel('psi')
  pyplot.grid(True)

  pyplot.subplot(222)
  pyplot.scatter(psi, fpol)
  pyplot.ylabel('fpol')
  pyplot.xlabel('psi')
  pyplot.grid(True)

  pyplot.subplot(224)
  pyplot.scatter(psi, -ffprim)
  pyplot.ylabel('ffprim')
  pyplot.xlabel('psi')
  pyplot.grid(True)

  if show:
    pyplot.show()


def default_plasma_boundary():
  boundary = np.array([0.227005788E+01, -0.130657255E-02, 0.226620195E+01, 0.444602325E-01, 0.225887967E+01,
                       0.896448819E-01, 0.224828844E+01, 0.133999077E+00, 0.223476024E+01, 0.177353941E+00,
                       0.221855159E+01, 0.219592443E+00, 0.219986209E+01, 0.260631186E+00, 0.217890097E+01,
                       0.300437256E+00, 0.215585294E+01, 0.339017463E+00, 0.213084404E+01, 0.376391556E+00,
                       0.210398788E+01, 0.412613716E+00, 0.207530013E+01, 0.447695152E+00, 0.204486255E+01,
                       0.481742195E+00, 0.201263309E+01, 0.514776151E+00, 0.197860880E+01, 0.546899105E+00,
                       0.194269791E+01, 0.578135858E+00, 0.190483165E+01, 0.608596161E+00, 0.186487771E+01,
                       0.638349283E+00, 0.182265717E+01, 0.667429974E+00, 0.177795086E+01, 0.695828506E+00,
                       0.173053314E+01, 0.723661913E+00, 0.168009164E+01, 0.750821154E+00, 0.162629841E+01,
                       0.777363359E+00, 0.156877466E+01, 0.802980519E+00, 0.150718496E+01, 0.827145643E+00,
                       0.144131919E+01, 0.849029138E+00, 0.137151295E+01, 0.866412990E+00, 0.129931968E+01,
                       0.875357323E+00, 0.122815692E+01, 0.870501677E+00, 0.116308865E+01, 0.846998755E+00,
                       0.110685250E+01, 0.806967035E+00, 0.105934272E+01, 0.756057561E+00, 0.101897883E+01,
                       0.699577583E+00, 0.984426133E+00, 0.640565700E+00, 0.954691735E+00, 0.580643921E+00,
                       0.929054591E+00, 0.520643610E+00, 0.907036879E+00, 0.460934744E+00, 0.888293515E+00,
                       0.401674586E+00, 0.872564515E+00, 0.342912162E+00, 0.859499431E+00, 0.284694658E+00,
                       0.849061020E+00, 0.226910915E+00, 0.841058600E+00, 0.169511892E+00, 0.835472877E+00,
                       0.112396973E+00, 0.832059597E+00, 0.554985082E-01, 0.830896946E+00, -0.130657255E-02,
                       0.831951646E+00, -0.581193741E-01, 0.835247871E+00, -0.115042469E+00, 0.840719427E+00,
                       -0.172198819E+00, 0.848570277E+00, -0.229668156E+00, 0.858848126E+00, -0.287550728E+00,
                       0.871708018E+00, -0.345916456E+00, 0.887212534E+00, -0.404877992E+00, 0.905664145E+00,
                       -0.464430091E+00, 0.927317266E+00, -0.524557300E+00, 0.952513742E+00, -0.585144307E+00,
                       0.981682735E+00, -0.645922244E+00, 0.101554473E+01, -0.706153893E+00, 0.105508946E+01,
                       -0.764352390E+00, 0.110194304E+01, -0.817219444E+00, 0.115811545E+01, -0.858719646E+00,
                       0.122450961E+01, -0.881101311E+00, 0.129784544E+01, -0.881923042E+00, 0.137186780E+01,
                       -0.867817657E+00, 0.144250247E+01, -0.846202858E+00, 0.150837245E+01, -0.821499633E+00,
                       0.156949981E+01, -0.795454776E+00, 0.162629841E+01, -0.769090955E+00, 0.167931650E+01,
                       -0.742596354E+00, 0.172905076E+01, -0.715964888E+00, 0.177594940E+01, -0.689241094E+00,
                       0.182037869E+01, -0.662283314E+00, 0.186266273E+01, -0.635023857E+00, 0.190301594E+01,
                       -0.607233442E+00, 0.194164114E+01, -0.578813677E+00, 0.197870238E+01, -0.549657860E+00,
                       0.201425260E+01, -0.519552709E+00, 0.204830947E+01, -0.488333308E+00, 0.208079987E+01,
                       -0.455808031E+00, 0.211164648E+01, -0.421863069E+00, 0.214066745E+01, -0.386358415E+00,
                       0.216757089E+01, -0.349161273E+00, 0.219204151E+01, -0.310225678E+00, 0.221376732E+01,
                       -0.269594636E+00, 0.223234646E+01, -0.227350811E+00, 0.224754733E+01, -0.183721714E+00,
                       0.225902173E+01, -0.138947106E+00, 0.226657890E+01, -0.933650092E-01, 0.227023490E+01,
                       -0.473618198E-01, 0.227005788E+01, -0.130657255E-02])

def ellipse_boundary(Re, ell_a, E, segments):
  ell_b = E * ell_a
  t = np.linspace(0, 2*pi, segments)

  r = Re + ell_a*np.cos(t)
  z = ell_b*np.sin(t)
  
  r[-1] = r[0] # loop it
  z[-1] = z[0]
  
  return np.array([r, z]).transpose().flatten()

def default_ffprim():
  ffprim = np.array([0.999417939E+01, 0.867587335E+01, 0.743508148E+01, 0.695207210E+01, 0.657569454E+01,
                     0.629749948E+01, 0.603575254E+01, 0.583357886E+01, 0.563452217E+01, 0.546150704E+01,
                     0.529334016E+01, 0.514365366E+01, 0.499626043E+01, 0.486438730E+01, 0.473811418E+01,
                     0.461570973E+01, 0.450077253E+01, 0.439026714E+01, 0.428251854E+01, 0.417977053E+01,
                     0.408147937E+01, 0.398571004E+01, 0.389229592E+01, 0.380187895E+01, 0.371470496E+01,
                     0.363036779E+01, 0.354810259E+01, 0.346752112E+01, 0.338872287E+01, 0.331221237E+01,
                     0.323773116E+01, 0.316469114E+01, 0.309300816E+01, 0.302264966E+01, 0.295356410E+01,
                     0.288572434E+01, 0.281925283E+01, 0.275437377E+01, 0.269086394E+01, 0.262842895E+01,
                     0.256701983E+01, 0.250657815E+01, 0.244701795E+01, 0.238828344E+01, 0.233038564E+01,
                     0.227343443E+01, 0.221747784E+01, 0.216249287E+01, 0.210837582E+01, 0.205502311E+01,
                     0.200237930E+01, 0.195040213E+01, 0.189905573E+01, 0.184830359E+01, 0.179815156E+01,
                     0.174870963E+01, 0.170005559E+01, 0.165219784E+01, 0.160500625E+01, 0.155832478E+01,
                     0.151214135E+01, 0.146646540E+01, 0.142129133E+01, 0.137659656E+01, 0.133238359E+01,
                     0.128882043E+01, 0.124599020E+01, 0.120372527E+01, 0.116192131E+01, 0.112055432E+01,
                     0.107961533E+01, 0.103910788E+01, 0.999052991E+00, 0.959468650E+00, 0.920373405E+00,
                     0.881818016E+00, 0.843823765E+00, 0.806325328E+00, 0.769264603E+00, 0.732606981E+00,
                     0.696357684E+00, 0.660517176E+00, 0.625070175E+00, 0.590093788E+00, 0.555689447E+00,
                     0.521878675E+00, 0.488592171E+00, 0.455719963E+00, 0.423260670E+00, 0.391226511E+00,
                     0.359638374E+00, 0.328646675E+00, 0.298274038E+00, 0.268349746E+00, 0.238847659E+00,
                     0.209839462E+00, 0.181451176E+00, 0.153801161E+00, 0.126834781E+00, 0.100389498E+00,
                     0.744817446E-01, 0.494291817E-01, 0.253368376E-01, 0.180020262E-02,-0.212091973E-01,
                     -0.431993615E-01, -0.640161112E-01, -0.842876889E-01, -0.103681598E+00, -0.121748344E+00,
                     -0.138964642E+00, -0.155487616E+00, -0.170113015E+00, -0.184089489E+00, -0.196908518E+00,
                     -0.208350897E+00, -0.218901438E+00, -0.228207261E+00, -0.236299558E+00, -0.243714174E+00,
                     -0.250018929E+00, -0.256210321E+00, -0.262269054E+00, -0.268844714E+00, -0.276835486E+00,
                     -0.285875810E+00, -0.297368729E+00, -0.309533860E+00])
  
  return ffprim
  
def default_pprime():
  pprime = np.array([0.335012952E+06, 0.243038167E+06, 0.158384855E+06, 0.145245202E+06, 0.141143698E+06,
                     0.139608090E+06, 0.138323506E+06, 0.137958905E+06, 0.137633363E+06, 0.137612867E+06,
                     0.137643056E+06, 0.137846315E+06, 0.138071389E+06, 0.138413402E+06, 0.138794793E+06,
                     0.139198297E+06, 0.139647210E+06, 0.140118480E+06, 0.140604390E+06, 0.141114657E+06,
                     0.141645411E+06, 0.142186965E+06, 0.142738784E+06, 0.143303236E+06, 0.143881002E+06,
                     0.144470289E+06, 0.145068112E+06, 0.145672922E+06, 0.146285204E+06, 0.146907424E+06,
                     0.147538788E+06, 0.148177022E+06, 0.148821883E+06, 0.149473384E+06, 0.150131487E+06,
                     0.150796217E+06, 0.151468649E+06, 0.152150683E+06, 0.152841584E+06, 0.153540067E+06,
                     0.154246029E+06, 0.154959339E+06, 0.155679726E+06, 0.156406983E+06, 0.157141464E+06,
                     0.157884486E+06, 0.158637097E+06, 0.159399845E+06, 0.160172202E+06, 0.160953504E+06,
                     0.161743469E+06, 0.162541926E+06, 0.163348741E+06, 0.164163671E+06, 0.164987074E+06,
                     0.165820882E+06, 0.166666964E+06, 0.167526508E+06, 0.168397855E+06, 0.169278629E+06,
                     0.170168890E+06, 0.171069065E+06, 0.171979329E+06, 0.172899457E+06, 0.173829813E+06,
                     0.174774686E+06, 0.175736558E+06, 0.176712352E+06, 0.177700040E+06, 0.178699106E+06,
                     0.179709512E+06, 0.180731620E+06, 0.181766307E+06, 0.182814343E+06, 0.183876525E+06,
                     0.184954817E+06, 0.186050290E+06, 0.187161233E+06, 0.188285994E+06, 0.189423534E+06,
                     0.190574069E+06, 0.191737635E+06, 0.192913719E+06, 0.194104807E+06, 0.195313945E+06,
                     0.196540986E+06, 0.197783113E+06, 0.199036424E+06, 0.200300179E+06, 0.201574293E+06,
                     0.202858665E+06, 0.204154096E+06, 0.205458732E+06, 0.206767566E+06, 0.208079174E+06,
                     0.209393060E+06, 0.210707027E+06, 0.212013409E+06, 0.213306648E+06, 0.214585746E+06,
                     0.215850982E+06, 0.217081712E+06, 0.218263024E+06, 0.219407918E+06, 0.220521581E+06,
                     0.221558365E+06, 0.222493116E+06, 0.223372462E+06, 0.224166053E+06, 0.224805399E+06,
                     0.225340329E+06, 0.225784503E+06, 0.225959322E+06, 0.226027519E+06, 0.225909648E+06,
                     0.225538722E+06, 0.225003136E+06, 0.224185757E+06, 0.223086575E+06, 0.221755830E+06,
                     0.220014998E+06, 0.218083899E+06, 0.215712952E+06, 0.213132640E+06, 0.210123945E+06,
                     0.206875823E+06, 0.203154809E+06, 0.199302180E+06])
  
  return pprime

def default_q():
  q = np.array([0.358500233E+00, 0.385550436E+00, 0.419383957E+00, 0.450008409E+00, 0.472495757E+00,
                0.491203977E+00, 0.507352632E+00, 0.521842008E+00, 0.535012876E+00, 0.547306396E+00,
                0.558897805E+00, 0.569960937E+00, 0.580598308E+00, 0.590895818E+00, 0.600887573E+00,
                0.610643070E+00, 0.620214092E+00, 0.629619083E+00, 0.638902288E+00, 0.648089166E+00,
                0.657193462E+00, 0.666231668E+00, 0.675228400E+00, 0.684199496E+00, 0.693154478E+00,
                0.702100688E+00, 0.711048240E+00, 0.720009737E+00, 0.728997061E+00, 0.738017268E+00,
                0.747076379E+00, 0.756181168E+00, 0.765340876E+00, 0.774563934E+00, 0.783857888E+00,
                0.793230460E+00, 0.802687957E+00, 0.812234959E+00, 0.821875945E+00, 0.831616091E+00,
                0.841462049E+00, 0.851420390E+00, 0.861497583E+00, 0.871700681E+00, 0.882036608E+00,
                0.892511694E+00, 0.903131536E+00, 0.913901347E+00, 0.924826915E+00, 0.935914561E+00,
                0.947171302E+00, 0.958604434E+00, 0.970221511E+00, 0.982030623E+00, 0.994039959E+00,
                0.100625744E+01, 0.101869029E+01, 0.103134521E+01, 0.104422995E+01, 0.105735324E+01,
                0.107072507E+01, 0.108435567E+01, 0.109825526E+01, 0.111243496E+01, 0.112690630E+01,
                0.114167992E+01, 0.115676629E+01, 0.117217619E+01, 0.118792214E+01, 0.120401819E+01,
                0.122047907E+01, 0.123731999E+01, 0.125455686E+01, 0.127220622E+01, 0.129028517E+01,
                0.130881116E+01, 0.132780222E+01, 0.134727742E+01, 0.136725772E+01, 0.138776585E+01,
                0.140882593E+01, 0.143046356E+01, 0.145270606E+01, 0.147558188E+01, 0.149912017E+01,
                0.152335052E+01, 0.154830523E+01, 0.157401979E+01, 0.160053321E+01, 0.162788740E+01,
                0.165612680E+01, 0.168529718E+01, 0.171544684E+01, 0.174662820E+01, 0.177890063E+01,
                0.181232771E+01, 0.184697597E+01, 0.188291470E+01, 0.192021882E+01, 0.195897154E+01,
                0.199926702E+01, 0.204120206E+01, 0.208487840E+01, 0.213040965E+01, 0.217792986E+01,
                0.222757678E+01, 0.227949505E+01, 0.233384984E+01, 0.239083277E+01, 0.245063859E+01,
                0.251349036E+01, 0.257964565E+01, 0.264937619E+01, 0.272298729E+01, 0.280084231E+01,
                0.288333690E+01, 0.297093125E+01, 0.306416156E+01, 0.316364138E+01, 0.327011080E+01,
                0.338445710E+01, 0.350776418E+01, 0.364142176E+01, 0.378717482E+01, 0.394740516E+01,
                0.412523907E+01, 0.432519099E+01, 0.455284455E+01])
  
  return q

def pprime_linear_profile(p0, psi0, length):
  pprime = p0/psi0 * np.ones(length)
  
  return pprime

def ffprim_linear_profile(F2_0, psi0, length):
  ffprim = 0.5*F2_0/psi0 * np.ones(length)
  
  return ffprim